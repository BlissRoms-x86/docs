[[{"i":"#","p":["Documentation for Bliss OS"]},{"l":"Getting Started"},{"l":"Table of contents"}],[{"i":"#","p":["Try out Bliss OS before installation via live boot"]},{"l":"Live boot Bliss OS"},{"l":"Downloading Rufus","p":["Giving our Android builds a try on your PC is pretty simple and straight forward. To start out, let's head over to https://rufus.ie and download the latest version of Rufus (I use the portable version)","Download Rufus"]},{"l":"Using Rufus to flash your USB drive","p":["Once downloaded, plug in your USB drive, and launch Rufus and give it permissions to make changes to your device. Then press the \" Select\" button to browse for the .iso or .img file.","Using Rufus to flash the USB","Select the .iso by pressing the \" Open\" button on that dialog:","Selecting the iso","Once selected, keep all the rest of the settings as default and click the Start button:","Start flashing the USB using Rufus","It will then show an ISOHybrid dialog, we will want to select .iso mode:","Select ISO mode","There might also be a notice about Syslinux, asking to download something. Select \" Yes\" and it will then continue.","Notice, select yes","Once that is done, it may ask you to \" OK\" the cleaning of your USB drive. Please select \" OK\"","Clean USB, select OK","Rufus will then start to write the USB drive with what is on the Android .iso you downloaded. This process may take some time."]},{"l":"Rebooting from windows into your USB drive","p":["From Windows, hit the Start Button > Settings > Update & Security > Recovery and select the Restart Now button under Advanced Startup.","Advanced startup","This will start to restart your PC, and show a Blue screen (Metro bootloader) where you will want to select \"Use a Device\" Then on the next screen, your USB Drive should show up as either Bliss OS, Android OS or something to that effect. Select that, and it will reboot to grub and let you select the boot options to Live Boot Android from there."]}],[{"i":"#","p":["Install Bliss OS from bootable USB Installer"]},{"l":"Install Legacy From Bootable USB"},{"l":"Introduction","p":["This is the current recommended method for beginners!","We recommend beginners to use this method as it is the least error-prone and non-destructive. The following instructions were adapted from the Android-x86 project, so some of the images are from them. To look at Android-x86's original installation guide, click here."]},{"l":"Download Bliss OS","p":["You can download a stable Bliss OS build by clicking on the link here, non-stable builds can be found here."]},{"l":"Install Bliss OS","p":["If you are looking for a GUI based installer for Windows, we do include one in some of the .ISO's we produce, and we also support the Supreme-Gamers Advanced Android-x86 Installer.","When booting into the installer, choose \"Installation - Install Android-x86 to harddisk\":","Booting into the installer","Once the installer boots, you will be asked to select the target drive. Choose the NTFS drive that houses your current Windows install. You do not need a separate partition, as the installer will create an image on your Windows partition.","Choose partition","Choose \"Do not re-format\" on the next screen. It is important that you choose \"Do not re-format\", as any other option will cause the installer to continue with the \"Bootable installation method\", which will result in permanent data loss, including your Windows partition!","Do not reformat","Choose \"Yes\" when prompted about the GRUB bootloader:","Install GRUB","The installer will ask whether or not you want to make the system partition read/write-able. If you want to root your installation, you will choose \"Yes\" here. Otherwise, choose \"No.\"","Root installation","The installer will begin to write the changes to the disk. This will take some time. Go grab a coffee!","Grab a coffee","Then the installer will ask you how much space you want to allocate for the data image. Most users choose 8 GB, 16 GB, or 32 GB.","Congratulations! You should now have a functional dual-boot with Bliss OS!"]},{"l":"Install EFI From Bootable USB"},{"i":"download-bliss-os-1","l":"Download Bliss OS","p":["You can download a stable Bliss OS build by clicking on the link here, non-stable builds can be found here."]},{"i":"install-bliss-os-1","l":"Install Bliss OS","p":["And just like with legacy, The installer will begin to write the changes to the disk. This will take some time. Go grab another coffee!","Booting into the uefi installer","Congratulations! You should now have a functional UEFI-boot with Bliss OS!","Create a [new ] partition","First create the EFI partition, this is the partition that is used to install the bootloader.","for \"Size in Sectors\" all we need to do is enter +512M","Format Drive p1 Format Drive p2","Grab a coffee","If you are looking for a GUI based installer for Windows, we do include one in some of the .ISO's we produce, and we also support the Supreme-Gamers Advanced Android-x86 Installer.","In the next screen, we need to make two partiitons for this to work, as Bliss needs to install a bootloader to boot to. if you have a pre-existing install of linux, this step may be unnecessary.","Install Grub","Lastly we click [WRITE ] and [QUIT ]","leave First Sector default (Just press enter)","Leave type as default","Next we need to make the second partition this is the partition that the bulk of android will be installed to.","Now that we have the drives partitioned, we can start to install android. Select the ANDROID partition that we have made before, and format it as ext4. this is the recomended format unless windows compatibility is need, in that case select NTFS. and click < Yes > on the next screen","Once the installer boots, you will be asked to select the target drive. You will need to choose what drive to install it too, this could be a pre-existing install of something, or a new drive, shown will be a new drive. you will need to select \"Create/Modify partitions\"","Partitioned","Partitioning p1","Partitioning p2","press down until the largest chunk of free space is slected, and click [NEW ]","Root installation","The installer will ask whether or not you want to make the system partition read/write-able. If you want to root your installation, you will choose \"Yes\" here. Otherwise, choose \"No.\"","The installer will procede to format and install android, you will then be prompted to install EFI GRUB2. we need to accept that, unless you have a pre-existing grub or other bootloader install","WARNING THIS WILL DELETE ANY DATA ON THE DRIVE","We can leave everything default. Although a name is not necesary we can call it ANDROID.","We don't necessairly need to name this partition, but it is best practice to name it EFI","When booting into the installer, choose \"Android-x86 ... Installation\":"]}],[{"i":"install-from-windows---uefiesp-64-bit","l":"Install from Windows - UEFI/ESP (64-bit)"},{"l":"Before you begin","p":["For 32bit or MBR/Legacy install, Axon from Supreme-Gamers put together a great installer that works with MBR or EFI and installs on NTFS or EXT4. Check it out here: https://supreme-gamers.com/t/advanced-android-x86-installer-for-windows.300/"]},{"i":"windows-based-installer---uefiesp-64-bit","l":"Windows-based installer - UEFI/ESP (64-bit)","p":["Proceed at your own risk. This method might be the easiest currently if you understand what you are doing.","For the overall instructions on using this method, please refer to the tool's original thread. The tools have been updated by Team Bliss for easy installation on UEFI/ESP machines. The builds we produce can be found here. And the source for those builds can be found here. This tool should work on Remix OS as well, but this has not been tested yet."]},{"i":"part-1---downloading-the-installer","l":"Part 1 - Downloading the Installer","p":["We normally include the installer in our .iso, but with some builds, it may not be included. So we make a few alternate versions of the Windows Installer available for users.","Installer for Android 9 and below - Androidx86-Installv26.0003.exe","Installer for Android 10 and above - Androidx86-Installv28.5800.exe","Installer for Android 10 and above, with Gearlock - Androidx86-Installv28.5900.exe"]},{"i":"part-2---using-the-installer","l":"Part 2 - Using the Installer","p":["The installer has been updated to accept the .iso files for our 8.x/10.x/11.x/12.x/14/x releases. Just execute the installer, give it Admin permissions, and follow the prompts the installer gives. Refer to the original thread for any questions, and please search before asking.","It will initially ask if you want to install Bliss OS, select \"Yes\":","Using the installer","It will then extract the installer resources, and load the main window:","Installation window","You will want to start by selecting an Android OS Image (Bliss OS, Phoenix OS Darkmatter, Android-x86, etc)","Then make sure you target your current Windows drive (typically C:\\)","Drag the slider to your desired data size. This will create a single data.img on your drive, the larger size you select, the longer it takes to create.","If you plan on using root, then enable \"Root Access\". Otherwise, if you find that you need root later, you will need to manually extract the system.img from within the system.sfs file. Then you must delete the system.sfs file after extracting",". Warning- for Pie, you will need to add androidboot.hardware=android_x86_64 to the grub entry in order to boot!"]},{"i":"part-3---switching-the-uefiefi-boot-entry","l":"Part 3 - Switching the UEFI/EFI boot entry","p":["Option 1: Use the EasyUEFI tool, then switch the UEFI/EFI entry it created to boot first. Close and reboot. Option two is to use your BIOS to select the added UEFI boot entry.","Option 2: Hit Start Button > Settings > Update & Security > Recovery, and select the Restart Now button under Advanced Startup.","Advanced startup","This will start to restart your PC, and show a Blue screen (Metro bootloader) where you will want to select \"Use a Device\" Then on the next screen, your Android install will show up as either Bliss OS, Android OS or Linpus Lite. Select that, and it will reboot to grub and let you select the boot options for Android from there.","Troubleshooting Installer Issues:","Sometimes, the windows installer will fail with: Error output: The directory is not empty.","This means that windows currently has something mounted at Z: or your EFI is mounted elsewhere. To fix it, launch CMD as Administrator (Ctrl-Shift-LClick), and type: mountvol Z: /S mountvol Z: /D","Then relaunch the installer and try again."]}],[{"l":"Install in VirtualBox","p":["This article is a draft content to describe how to install Bliss OS on VirtualBox. It combines android-x86 VirtualBox howto and our old article:\"Install Bliss OS on a VM ( virtualbox)\"."]},{"l":"Create a new VM","p":["If you have not already created a VirtualBox virtual machine for Bliss OS yet, do so as follows:","Click the \"New\" button, and name your new virtual machine however you like. Set Type to Linux, and Version to Linux 2.6 / 3.x / 4.x. Note that you should choose the appropriate bit type for the version of Bliss OS that you downloaded.","Specify how much RAM will be allocated to your virtual machine when you run it. Android doesn't specify a bare-minimum requirement for memory, just keep in mind what apps you plan on running. 2GB (2048MB) is a good place to start, and you can change this later if you need to.","Create a new Hard disk image which will act as your machine's storage. The recommended starting size of 8GB is enough. Click through the rest of the options for creating your Hard disk.","Your virtual machine has now been created. It still needs to be initially installed at this point."]},{"l":"Settings","p":["Tested on VirtualBox 64-bit for Ubuntu 20.04 with Intel and AMD( Ryzen R7 4800H) processors, version 6.1. Bliss OS version v11.11, 64-bit.","Select your machine, then click the Settings button and refer to the below recommended configuration to make sure your settings match.","[System] Recommended: Processor(s) should be set above 1 if you have more than one virtual processor in your host system. Failure to do so means every single app (like Google Chrome) might crush if you try to use it.","[Display]:","2.1. Optional: Video Memory may be increased beyond the minimum selected automatically. The affects of this are unknown.","2.2 Mandatory: Unless guest additions are installed, change the default VMSVGA to VBoxVGA.","2.3 Optional: Enable 3D Acceleration may be checked. The Linux Guest Additions must ( VirtualBox v6.1+) / may ( VirtualBox v6.0 and below) need to be installed to get any benefit from this.","Failure to do so means you won't even be able to launch Bliss OS in the first place.","[Storage] Find the first \"Empty\" item (this should have an icon of a CD). In the Attributes, click on the CD icon with a small down arrow, and pick \"Choose Optical Virtual Disk File...\". Specify the Bliss OS ISO that you downloaded.","[Audio] Intel HD Audio seems to be natively supported in Bliss OS.","[Network] By default, your installation of Bliss OS will be able to automatically connect to the internet. If not, you can try to enable WiFi in \"Settings/Network & Internet\", and connect to showing VirtWifi. If you do not want to connect to the internet in VirtualBox, uncheck \"Enable Network Adapter\" under the Adapter 1 tab."]},{"l":"Install","p":["Now we can click the start on VirtualBox to start the VM.","When entering installation page, 1. select \"Installation - Install Bliss-OS to harddisk\". 2. Press D to detect devices. 3. Press C to create and modify partitions. If asked, select \"No\" for GPT. 4. Select \"New\", \"Primary\", \"full size\", and then make it bootable. 5. \"Write to disk\". 6. \"Quit\". 7. Select the partition and then reformat to ext4. 8. Select \"Yes\" to install GRUB. 9. Select \"Yes\" to make the /system directory writable.","After than, just closing the installing window, and restart this VM instance, and select \"Advanced Options\" and \"Boot from local device\" to select Bliss OS with different options to start.","To here, you should have a fully working Bliss OS install in a VM, or at least something that works... even if it may be slow. Again, Android on VM is generally not a good idea and you will get a lot more performance if you install Bliss OS to the actual hardware."]}],[{"l":"Install with Qemu Script","p":["This article is a guide to install Android Generic builds on Qemu. Bliss 14 at the current moment does not work. Gearlock causes resizefs errors that do not occur in the current Project Sakura build. There is a version of Bliss 11.13 that does have a working Gearlock in the BLISS OS telegram group.","Also tested is AOSP 12. with AOSP 12 you may need to boot with hwcomposer.drm to get it to work properly when using virgl graphics. currently default boot does not work, and while using gbm mesa, the android UI crashes when a mouse is drawn. so while a keyboard works. no mouse control even with a real mouse passed through to the VM. this is not an issue when using hwcomposer.drm. I recommend duplicating or editing the hwcompser.drm entry, remove 'DEBUG=2' from it. as it will allow usage as normal."]},{"l":"Background","p":["Qemu while simple in use, can be complicated to understand for beginners. This is because Qemu has a LOT of options for customization, many of which are useful, but more so that are not.","Qemu on windows as of time of writing this will NOT work on bliss 14. but may work on bliss 11. this is due to lack of software rendering on bliss 14. assuming Gearlock issues get fixed. in the mean time, use Project Sakura OS.","If you wish to use this guide on windows 10 or above, It may be possible to use WSL, however to get Qemu KVM support on WSL you will need a custom kernel. Another possible method is to use an unofficial patch from the qemu-3dfx project to get virgl working on windows. but at this current time. it has not been tested with any android generic project."]},{"i":"make-the-image","l":"Make the image.","p":["When you have Qemu installed be it on Linux or windows, you will have installed a plethora of Qemu related tools. the tool we need for this is qemu-img, Navigate to the folder you want your image installed in and run the following command.","qemu-img create -f qcow2 Bliss14.qcow2 20G","Breaking this down a little bit running qemu-img create is used to tell the program we want to create.","-f qcow2 is used to tell it we want to create the image using qcow2 format. qemu-img supports many formats so we want to specify this one.","Bliss14.qcow2 is the name of the image","20G is the image size."]},{"i":"make-a-script-to-run-the-vm","l":"Make a script to run the VM.","p":["Below is a sample bash script used to run Bliss14 in a Qemu VM","If you don't want an in-depth explanation, you can skip the next section, Just make sure to replace -drive and -cdrom with the proper disk image, and cdrom image for your use."]},{"l":"Explanation","p":["-bios /usr/share/ovmf/x64/OVMF.fd \\ is needed to tell Qemu to boot using UEFI, which is necessary as right now there is a bug that prevents android-generic based roms from being installed when in legacy mode. It is important to note that the location of this can vary depending on the host OS.","-cdrom images/Bliss-v11.iso \\ Just mount the iso for bliss, while we could use virtio driver for this, there is no real need to, because it's only use is installing the OS, this can be removed when the VM is installed","-cpu host This tells Qemu what CPU it should be trying telling the guest it is. Generally it is the preferred option. However in case you start to get instability -cpu qemu64 may be the option you need as it presents a very bare bones cpu to the VM. see qemu-cpu-models of the Qemu docs to learn more.","-device qemu-xhci,id=xhci tells Qemu what USB version to use, no need to change this","-device virtio-keyboard is for keyboard, no need to change anything here, usb-kbd also exists for using emulated keyboard instead.","-device virtio-tablet is one of two options for mouse capture the other being -device virtio-mouse using Tablet will allow you to use Qemu as if it were any other app, using virtio-mouse on the other hand will capture the mouse, and lock it to the VM. and to free it you will need to click ctrl+alt to free it. You may use usb-mouse or usb-tablet to use a emulated mouse and tablet instead of the paravirtualized ones. which incurs a very minor preformance hit. but also a measurable latency one.","-device virtio-vga-gl this is needed for graphics acceleration, and while you can add a plethora of arguments, none are really beneficial at this time.","-display sdl,gl=on This is used for the display, there are three main options here -display sdl,gl=on display gtk.sdl-on and -display spice-app,gl=on The difference between these are some features. each one has pros and cons, feel free to experiment. Though do take note that even if you close the VM's window with -display spice-app,gl=on the VM will still be running, you will need to kill it from the terminal.","-drive file=disks/bliss14-k54-gapps.qcow2,if=virtio \\ is how we mount the disk. Using this method instead of -hda lets us use virtio driver instead of emulated driver, giving us greater performance in the VM.","-enable-kvm tells Qemu to use KVM hypervisor, this is how we get near native CPU performance from our VM","-m 4096 -smp 4 tells Qemu How much ram to use, and how many cores to add the the VM","-M q35 This tells Qemu what Machine type to run as, we need to specify this as i440fx will not work it is simple too old.","-machine vmport=off \\ this option turns of vmware I/O emulation. this has caused me some bugs in the past, so I leave it off.","-net nic,model=virtio-net-pci -net user,hostfwd=tcp::4444-:5555 This really long command is the network command, -net nic,model=virtio-net-pci is what is used to add the network device to the guest in which case we are using virtio drivers again for best performance. -net user tells Qemu how to pass the network through and the argument hostfwd=tcp::4444-:5555 forwards port 4444 and port 5555 together, meaning if we open another terminal and type adb connect localhost:4444 we can get an adb connection to the VM.","-usb is used to tell Qemu to add a USB controller, no real need to give it any additional arguments","qemu-system-x86_64 is used to launch the program, there are various other commands that can launch different versions of Qemu, but this is the one we want in the majority of cases.","While this looks a little complicated, when we break this down we can see that it isn't. we are just telling Qemu what we want our virtual machine to have attached to it. if you don"]},{"l":"Install","p":["The rest of the installation is the same as real hardware. You should be able to proceed as normal."]},{"l":"Known Issues","p":["Currently we cannot properly set resolution using qemu and virgl. Because of this we need to manually edit the grub file in the VM to do so. There are a plethora of ways to do this. However the easiest is to use qemu-nbd to manually edit the grub entry and use video=1920x1080 to manually set resoltuon to 1080p. Change this value to a resolution that suits your needs.","Qemu does not currently support vulkan acceleration. While there was a work in progress patch that had support. It has not made it into qemu yet, nor does it seem like it will anytime soon. You may use physical gpu passthrough to get around this issue.","Qemu does not currently support video decode/encode acceleration. There is no news when this might be availible in qemu. You may use physical gpu passthrough to get around this issue."]},{"l":"Additional customizations","p":["Qemu is an incredibly powerful tool. this quick guide barely scratches the surface of some of the advanced customizations that are possible. if you are looking for more advanced features to step up your VM. To make it closer to a hardware install. Here are some potential further customizations that are possible with Qemu.","USB passthrough","EVDEV usb+mouse passthrough for easy switching","PCIe passthrough","egl-headless for remote VM's with graphics acceleration","emulate USB storage device","It may also be possible to use multiple virtual monitors, though this has not yet been tested.","This is all possible using virt-manager, or any other libvirt solution given they too support it. no guide has been written up for it yet."]}],[{"l":"Syslinux EFI Stub Installation"},{"i":"use-syslinux-efi-to-run-bliss-os-7x10x11x12x14x","l":"Use syslinux EFI to run Bliss OS 7.x/10.x/11.x/12.x/14.x","p":["Thanks to @IcedCube for the original post! This method is NOT recommended as it is fairly bleeding-edge and experimental, but it should help booting on Chinese tablets that do not want to run grub.","Use a Linux installation for the following procedure."]},{"i":"part-1---grab-the-required-tools","l":"Part 1 - Grab the required tools","p":["Install unsquashfs(part of squashfs-tools)."]},{"i":"part-2---get-bliss-os","l":"Part 2 - Get Bliss OS","p":["Grab the latest build of Bliss OS 7.x/10.x/11.x/12.x/14.x"]},{"i":"part-3---get-the-syslinux-efi-bootstrap","l":"Part 3 - Get the syslinux EFI bootstrap","p":["Grab the .zip file from @IcedCube's original post, and extract it to the root of the USB drive. This will bootstrap syslinux EFI onto it.","Then, make a folder called android.","Now, open up the .iso in an archive program. Extract the following files form the root directory of the .iso image to the USB drive's android folder ( ramdisk.img is not used in Android 10+ ):","initrd.img","ramdisk.img","kernel","Extract system.sfs to a folder somewhere, such as /tmp.","Open a terminal and change directory (using cd) to /tmp. Run ls and confirm that system.sfs is shown in the file list. If there is no output, start over as the file is misplaced.","Run the following:","unsquashfs ./system.sfs","This will make a new directory called squashfs_root."]},{"i":"part-4---version-specific","l":"Part 4 - Version specific"},{"i":"if-you-are-using-bliss-7x","l":"If you are using Bliss 7.x","p":["Change directory to squashfs_root and run ls. There should only be one file - a system.img inside the directory. Copy the file to the USB's android folder."]},{"i":"if-you-are-using-bliss-10x11x12x14x","l":"If you are using Bliss 10.x/11.x/12.x/14.x","p":["Change directory to squashfs_root. The structure is a complete Android root filesystem. To install Bliss OS, the files will need to be in a system image. The following steps will guide you through creating a 2 GB system.img file, formatting it, mounting it, and copying the contents of squashfs_root into the new disk image.","Execute:","The sync command might take some time.","Now copy the /tmp/system.img file to your USB's Android folder."]},{"i":"part-5---creating-the-data-image","l":"Part 5 - Creating the data image","p":["First, find where your USB drive is mounted. It is usually in /mnt or /media(ex. /media/USB).","cd into the android folder.","We will create a 3 GB data image file. You can attempt to create a 4 GB image but FAT32 maxes out at 4 GB per file. If your system supports exFAT or NTFS, you may try and use it.","This will be an completely empty ext4 disk image, but will be enough to run Bliss.","Finally, check to ensure everything is in structured like so:","Need to add some kernel parameters? Open syslinux.cfg and add them before the initrd=/android/initrd.img statement.","Unmount the USB from your computer. Plug it into your device and use the BIOS to boot from your UEFI USB Drive, partition 1. If all goes well, you will get a black screen with small white text saying \"Booting Android...\" followed by loading files. You should get the Linux kernel text, then see the Bliss boot animation play after a couple minutes depending on your USB drive read/write speed."]}],[{"i":"updating-bliss-osag-builds","l":"Updating Bliss OS/AG builds","p":["Somethmes you might want to update your Bliss OS/AG install when a new release is pushed out. Doing this is simple, as long as you used our documented methods to install.","Bootable USB Method:","This process is exactly the same as when you installed, except now it will ask if you want to update and existing install instead.","Windows Installer Method:","Use 7-Zip to open the new .iso, and simply drag the kernel, initrd.img (and ramdisk.img if on Pie) to the install folder, overwriting the old ones, then in 7-Zip, double click on the system.sfs file and drag the system.img inside over to replace your existing system.img. If you only have a system.sfs file, replace that with the system.img, and delete the old .sfs file. Then reboot and boot into your newly updated release"]}],[{"l":"Advanced Installation","p":["This is only for advanced users. For regular users, please visit our main Installation Guide found here."]},{"i":"custom-install---bliss-os-8x10x11x-uefiesp-64-bit","l":"Custom Install - Bliss OS 8.x/10.x/11.x UEFI/ESP (64-bit)","p":["Just as a reminder, Team Bliss is NOT responsible for any damage caused by this guide. By continuing, you automatically agree to these terms."]},{"i":"part-1---mounting-your-uefiesp-partition","l":"Part 1 - Mounting Your UEFI/ESP Partition","p":["You will want to make sure you can view hidden and system files in Explorer options. Once you do that, hit the start menu, and type in cmd. Once \"Command Prompt\" shows up, right click on it and choose \"Open as administrator\"."]},{"i":"cmd-is-not-showing-up-what-should-i-do","l":"cmd is not showing up, what should I do?","p":["Press the Windows key and the R key to bring up the \"Run...\" dialog. Type in cmd, and then press Ctrl-Shift-Enter. Press \"Yes\" on the UAC popup.","Run the following:","Then check to see if it is mounted already. Run \"Task Manager\" by either","Pressing Ctrl-Alt-Del and then clicking on \"Task Manager\", or","Pressing Ctrl-Shift-Esc","Click on \"File\", \"Run new task\", \"Browse\", \"This computer\", and SYSTEM (X or type in X: in the filepath bar. If you cannot access X:, then that could mean one of three things.","You have an ESP setup (follow the installation method below)","You have a legacy MBR setup","Your setup has a custom boot sequence"]},{"i":"part-1-alternate---esp-setup","l":"Part 1 (alternate) - ESP setup","p":["Windows 10 sometimes has an EFI partition already mounted under drive letter Z:, hidden. A very quick and easy way to access the ESP (EFI System Partition) in Windows 10 without using the command line is to start \"Task Manager\" (check above if you forgot the steps), and then click on \"File\", \"Run new task\", \"Browse\", \"This computer\", and SYSTEM (Z or type in Z: in the filepath bar).","Now go to boot/grub/grub.cfg and edit it accordingly with Notepad++ or another text editor. Save the file and your're ready to go!"]},{"i":"part-1-alternate---killing-the-explorerexe","l":"Part 1 (alternate) - Killing the explorer.exe","p":["Run cmd as admin and enter the following command:","This will kill the explorer.exe process - don't be surprised if it shows a warning. This step is sometimes required, because by default explorer.exe is ran by the currently logged in user, and it has to be run by the \"Administrator\" in order to view the mounted system drive. The \"Administrator\" account is not the same as an account with administrative privileges.","This will mount the system partition that usually consists of UEFI related files. X: is the letter of the drive - you can use whatever letter you want, but it has to be free for assignment. Then type:","This will run explorer as \"Administrator\" and will allow you to browse the mounted system partition.","The above may not work for all devices, as some handle UEFI differently."]},{"i":"part-2---uefi-installation","l":"Part 2 - UEFI installation","p":["Let's start by downloading the required files. Here is a customized UEFI boot for 32/64-bit machines.","Please note that if you came from our Nougat builds to our Bliss OS 8.x builds, you will have to edit the grub.cfg.","If you are using Bliss OS 8.x/10.x, please use the grub entry below as a guide:","If you are installing on ext3/ ext4, due to a bug in the install you will have to use the following grub entry setup:","Now that we have the partition mounted, we can copy that BOOT directory to your UEFI partition using explorer as the Administrator or by using the \"New Task\" dialog from Task Manager. (See above if you forgot the steps!) Once it is copied, go back to the Administrator cmd prompt and type:","or if you used Z:, type:","This will dismount the UEFI/ESP volume for safe reboot. We then suggest you use EasyUEFI here to create the UEFI boot entry. Open the app, and create a new entry. Select your UEFI partition, and in the \"File\" Path, click \"Browse\" and use the file manager window to browse to your BOOT/grub/grubx64.efi file. Click OK, and then choose the new grub entry and move it to the top. Make sure Secure Boot is turned off or else it likely will just boot back to Windows."]},{"i":"part-4---the-manual-blissification-of-your-pc","l":"Part 4 - The Manual Blissification of Your PC","p":["To do a manual \"Wubi like\" install of Bliss OS after you install the UEFI entry, you will need to open the Bliss OS .iso/.img with 7zip, and then drag all the .img& .sfs files to C:/android-x86 or whatever your target drive is (make sure your grub entries match where you are putting these). Then create your data.img. We suggest using a tool like RMXtools (use version 1.7) from XDA to create it. Check the tool's thread for detailed instructions. You will want to create your data.img inside that android-x86 folder.","You can now reboot if you have installed the custom UEFI entry right and selected it using EasyUEFI. You should boot right to the Android-x86 grub theme. There, you can use up and down to select, and return to boot that entry. You can also hit e to edit the selected entry. You will want to pay attention to which entry you select, since there will be one for Bliss-x86(32bit) and one or Bliss-x86_64(64bit)."]}],[{"l":"Manual Install on Linux"},{"l":"Installation","p":["!!ATTENTION!! Bliss OS also supports Jaxparrow's Android-x86 Installer for Linux. Source can be found here: https://github.com/jaxparrow07/Androidx86-Installer-Linux","Create a directory at / as /blissos","Extract initrd.img, ramdisk.img, kernel and system.* from your desired blissOS ISO into the /blissos directory.","Make a dir called /blissos/data (Only valid for android-pie, for higher versions you need data.img, can be created with make_ext4fs)","Create a new grub entry with this the following code:","menuentry BlissOS { set SOURCE_NAME=blissos search --set=root --file /$SOURCE_NAME/kernel linux /$SOURCE_NAME/kernel quiet root=/dev/ram0 androidboot.hardware=android_x86_64 androidboot.selinux=permissive acpi_sleep=s3_bios,s3_mode SRC=/$SOURCE_NAME initrd /$SOURCE_NAME/initrd.img}"]},{"i":"example-for-making-a-8gb-image","l":"Example for making a 8gb image:"}],[{"l":"Run from Docker","p":["We have gained support for running our images from Docker thanks to @sickcodes and his Dock-Droid project.","Our stable Android 9 based images are default, but you can load up a specific image as well (helpful for testing in a development environment)"]},{"i":"exerpt-below-taken-from-httpsgithubcomsickcodesdock-droid","l":"Exerpt below taken from: https://github.com/sickcodes/dock-droid"},{"l":"Initial setup","p":["Before you do anything else, you will need to turn on hardware virtualization in your BIOS. Precisely how will depend on your particular machine (and BIOS), but it should be straightforward.","Then, you'll need QEMU and some other dependencies on your host:","Then, enable libvirt and load the KVM kernel module:"]},{"l":"Quick Start"},{"i":"run-bliss-os-11x-image-httpsimgshieldsiodockerimage-sizesickcodesdock-droidlatestlabelsickcodes2fdock-droid3alatest","l":"Run Bliss OS 11.x Image https://img.shields.io/docker/image-size/sickcodes/dock-droid/latest?label=sickcodes%2Fdock-droid%3Alatest","p":["Increase RAM by adding this line: -e RAM=4 \\","Want to use your WebCam and Audio too?","v4l2-ctl --list-devices","lsusb to get the hostbus and hostaddr","Would be -device usb-host,hostbus=3,hostaddr=3","Want to use SwiftShader acceleration?","In development by BlissOS team: mesa graphics card + OpenGL3.2."]},{"i":"use-your-own-imagenaked-version","l":"Use your own image/naked version","p":["Use any generic ISO or use your own Android AOSP raw image or qcow2","Where, ${PWD}/disk.qcow2 is your image in the host system."]},{"l":"Custom Build"},{"l":"How to connect using ADB","p":["In the Android terminal emulator:","Edit /default.prop","Change ro.adb.secure=1 to ro.adb.secure=0","E.g.","In the Android terminal emulator, run adbd","Then from the host, you can can connect using either: adb connect localhost:5555","adb connect 172.17.0.2:5555","For further information, and even information. on a dockerized build environment for Bliss OS, please visit: https://github.com/sickcodes/dock-droid"]}],[{"l":"Install on Mac OS"},{"i":"triple-boot-macos-windows-and-bliss-os","l":"Triple boot macOS, Windows and Bliss OS","p":["(Thanks to @lconstantin for this guide)","Also, because you chose to install GRUB, rEFInd will get replaced with GRUB as the default boot manager on the EFI partition at this stage. You can choose not to install GRUB during installation and manually create a boot entry for Bliss in rEFInd which will not be explained in this guide.","Alternative: It should be possible to skip the Windows installation. Read at the end.","Alternative: It should be possible to skip the Windows installation. You can boot into macOS recovery and use the Disk Utility from there to resize the macOS partition and create a new partition for BlissOS formatted as FAT32 (macOS does not support many filesystems natively). You can then create the BlissOS bootable stick from macOS using UNetbootin instead of Rufus and also make sure you download rEFInd, unpack it and copy its directory to the stick. Then boot into recovery again, install rEFInd, boot into rEFInd to start the BlissOS installation. You can reformat the FAT32 partition as NTFS during the BlissOS installation and then follow all the steps. Install Grub. Go into recovery again, install rEFInd again and you're done.","At this stage if you reboot your system you will only see GRUB and you will only be able to boot into the Bliss OS installation. You need to reinstall rEFInd to restore booting into macOS and Windows. (In reality rEFInd is still there on the EFI partition, but not the default option anymore). Luckily you still have the rEFInd directory on your BlissOS bootable stick, so repeat the instructions from step 9 again to boot into macOS recovery, open terminal, navigate to the USB stick and run the ./refind-install script again. This will restore rEFInd as the default boot manager with all the options it had (the previous configuration doesn't get replaced.)","BACKUP ALL DATA with TimeMachine","Boot into Windows and download a) the latest version of Bliss OS, b) the latest version of the rEFInd boot manager and c) Rufus, a program for creating bootable USB sticks.","cd / cd Volumes cd BLISS-xx (the name of the USB stick) cd refind-xx (the name of the refind directory on the stick) ./refind-install","Choose the install option and go through the normal process ( detailed here). Select either the Windows partition or the new partition you created for Bliss (my case). Do not reformat. Choose YES when asked to install GRUB (this will replace rEFInd temporarily). Create the BlissOS data image with the size you want.","Disable FileVault (disk encryption in macOS). This can take a long time (hours) if you already have it turned on and sometimes it can result in a locked state where the filesystem is not fully decrypted and the option to turn FileVault on or off is greyed out. Recovering from this state might require wiping the entire SSD from macOS recovery. This happened to me and I couldn't find a solution. Apparently it's a fairly common problem as I found many reports online.","Download the Windows 10 installation ISO from Microsoft's website. It’s freely available.","However, note that rEFInd does not install an NTFS driver by default and does not install an ext3/4 driver either unless a Linux installation is present on the disk when rEFInd is installed. There are ways to fix this and include drivers (see rEFInd documentation on drivers), but it's easier to just use rEFInd to start GRUB which will boot Bliss regardless of whether it's on an NTFS or ext4 partition.","Install Rufus and create a bootable stick for Bliss OS using the ISO you downloaded earlier.","Launch Boot Camp Assistant and follow the instructions to install Windows using the downloaded ISO. The process will allow you to resize the macOS partition and will create the Windows partition called BOOTCAMP for you. When you choose the size of the BOOTCAMP partition please account for the extra space you will need for Bliss OS including its data. I wanted 32GB for the Bliss OS data image so I accounted for 50GB extra for BlissOS when choosing the size of the BOOTCAMP partition.","Note: I have not tried this multiboot process with FileVault enabled because I read FileVault does not play nicely with multiboot so I just decided to disable FileVault. I don't know if it might actually work with FileVault on, but probably not.","Note: Once Boot Camp is done installing Windows you will be able to boot into it and select it as boot option when the Mac starts up. At this point the system will still use Apple's bootloader, which by design is capable of booting Windows too.","Notes: If you created a separate NTFS partition, you could choose to format it as ext3/4 during the Bliss OS installation. If you choose this option the installer will no longer ask you to create a data image.","OPTIONAL: You have the option to either install Bliss OS on the same partition as Windows or you can resize the Windows partition using the Disk Manager in Windows and create a new partition for Bliss OS. I chose to resize and create a new partition of 50GB for Bliss OS and I formatted this new partition as NTFS.","Reboot and now you will see the rEFInd boot screen with multiple options for booting into macOS and Windows that will be automatically detected. Note: For macOS Big Sur and later the option that works is the one that says \"Boot macOS from Preboot.\" You can hide the other option by selecting it and pressing the - (minus) key. For Windows it’s the Boot with EFI option. You can hide the rest. You can test that booting into both systems works at this stage before continuing.","Reboot the Mac and keep COMMAND + R pressed during the booting process. This will boot into macOS recovery. Go to Applications > Utilities in the top bar and choose Terminal. This will open a terminal shell. Type:","rEFInd will also provide you with an option to boot into the Bliss OS stick if it’s plugged in. This will launch the GRUB bootloader that comes with Bliss OS and will show you multiple options: to start Bliss OS Live which can be used to test if Bliss works on your system or to install the OS to disk.","Remove the USB stick and reboot your system. You will now see the rEFInd screen again with options to boot into macOS, Windows and multiple options for BlissOS, which will be detected with a Linux icon. Choose the option that says Boot with /EFI/Android/grubx64 and you can hide the rest. This will launch the familiar GRUB screen with all the normal BlissOS boot options.","This will launch the rEFInd installation script and will install the boot manager.","Unpack the rEFInd zip and copy its directory to the Bliss OS bootable stick. DON’T SKIP."]}],[{"i":"#","p":["For those that want to use the auto-install feature, there are a few things you should know first."]},{"l":"Using Auto-Install","p":["Android-x86's bootable USB Auto-Install feature will only work for Android 9 and below. and it requires a MBR or Legacy boot setup and not EFI.","It sets a fixed size for the data image and does not allow for proper root as well. So if you still require the use of Auto Install, please note that we do not support this method as it is outdated."]}],[{"i":"gui-method-build-bliss-os-14x","l":"[GUI Method] Build Bliss OS 14.x"},{"l":"1. Setting up the environment","p":["This first part will go over the steps needed to sync and setup your Build Environment for Bliss OS 14.3 source. If you have done that already, you can skip to the next section. Setting up your build environment can also be done the easy way , and for that, we can use EZ-AOSP. For Ubuntu, use MikeCrigs' repo, or for MX-Linux, use My repo, and continue at “Grabbing the Source” when done. Otherwise, we have the manual steps below.","System Requirements","Installing Java 8","Grabbing Dependencies","If you plan on building the kernel with the NO_KERNEL_CROSS_COMPILE flag, you will need to also have gcc-10+ installed:","Setting up your credentials","The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating:","Grabbing the Source","(This is where EZ-AOSP leaves off)","We will need to create a folder for our project, then init the manifest, and sync the repo, and we do all that in a few simple terminal instructions:","Although we are doing our best to help you learn, it never hurts to become a bit more versed in building AOSP. so be sure to also check out: AOSP building instructions"]},{"i":"2-how-to-include-android-generic-project-into-your-project","l":"2. How to include Android-Generic Project into your Project:","p":["Now all we have to do is clone AGP into the vendor folder."]},{"l":"3. Using AGP with Bliss OS","p":["Now that AGP is cloned into the project, we start it up like so:","That's it! It will initially generate the menu items with what is available for modules on initial launch","Since Bliss OS is already setup as a project, we don’t really need to use any of the other “Project Setup” options (01-06), and we will normally go straight to option 10-build-options. Double click on that.","This will launch the main build menu, which contains all the options related to the build commands. From here, things pretty much match the main AGP instructions. Here’s a quick rundown of what they all do from here:"]},{"l":"Build Options","p":["(This segment uses content from Android-Generic Project documentation. Please refer to that for further details: https://android-generic-project.gitbook.io/documentation/android-generic-project-using-with-bliss-os-source)**** This menu will show the various build options for compiling your project through AG.","Based on what Product you selected prior to selecting this option, the script will compile the resources needed to include Rusty-Magisk into your build","Enable Rusty-Magisk","FOSS- Free & Open Source apps from Aurora Droid & Aurora Store (and microG client) (x86/x86_64/arm64) GMS- not implemented by default EMU-Gapps- Proprietary gapps extracted from Google's Emulator images. (x86_64 only) Vanilla- No added apps or services","Make Clean Before Build- Will add \"make clean\" to your build command and have it run every time you start the build. No Kernel Cross-Compile- Will add the override for NO_KERNEL_CROSS_COMPILE and allow you to build the kernel using GCC 10/11 from your installed system instead of using AOSP or your ROM's GCC","None- No changes to Native Bridge aside from what Android-x86 includes by default Intel's Houdini- Will pull the latest supported ChromeOS recovery image, and extract the Houdini & Widevine files from that and include in your build. Google's libndk-translation- Will need manual setup of vendor/google/emu-x86 before using. Follow readme from that project (we were unable to reproduce results of extracting super.img automatically)","Run Make Clean","Select Apps Type","Select Extra Options","Select Make Type","Select Native-Bridge Type","Select Product Type Selecting this will ask you what device type you plan on targeting (PC: android_x86 / android_x86_64)","Select Variant Type","Selecting this option will allow you to choose what kind of final image you would like.","Selecting this will ask you what build variant type you plan on targeting (user, userdebug, eng)","Selecting this will immediately run the \"make clean\" command on your project. Clearing the PRODUCT_OUT folder","Selecting this will present the options for included Apps type","Selecting this will present the options for Native-Bridge.","Standard .iso Image- generic .iso for MBR/EFI EFI .img file- Builds .iso for using in EFI devices RPM Linux Installer- Compiles as an .rpm installer for linux based systems and will install in a folder on the linux drive.","Start The Build","This command is dependent on all previous options and will also save/reload your last used build command (all the options selected in this section above), then run the build command in the terminal. From this point forward, any errors will need to be resolved manually.","This will contain only options that can be interchangeable (affected with only an export or build environment variable)"]}],[{"i":"#","p":["Instructions on how to build Bliss OS yourself"]},{"i":"build-bliss-os-11x","l":"Build Bliss OS 11.x"},{"l":"Introduction","p":["This is the official guide to build Bliss OS for PCs. In this guide, we will only cover building for x86 & x86_64 devices. We will also go over the details of using the patch system for testing and recompiling a build with a different kernel branch.","The golden rule to building is patience. If something breaks, pay attention to the console output or take logs of the issue and ask for guidance in our build support chat.","Let’s get started."]},{"l":"Preparation","p":["To get started, you need a computer with Ubuntu 18.04 (LTS), at least 200GB space of HDD, and at least 8GB RAM. A decent CPU (or CPUs if you have a server motherboard) is recommended. Other distros can work but is not officially supported in this guide.","Underpowered machines may crash during compilation. If that happens, you may try and restart the build as most crashes are caused by lack of memory. If your storage space has run out, then you will need to build on a different hard drive."]},{"l":"Install the JDK","p":["Install OpenJDK:"]},{"l":"Install build tools","p":["To install the required build tools, run the following command:"]},{"l":"Install source code tools","p":["Now we need to get the source code via a program named repo, made by Google. The primary function of repo is to read a manifest file located in Bliss OS's GitHub organization, and find what repositories you need to actually build Android.","Create a ~/bin directory for repo:","The -p flag instructs mkdir to only create the directory if it does not exist in the first place. Now download the repo tool into ~/bin:","Make repo executable:","And add it to PATH:","Scroll to the end of the file and type these lines:","Ctrl-O and enter to save, then Ctrl-X to exit nano. Now either logout and login again (or reboot), or source the file:","Which can be shortened to:"]},{"i":"what-is-source","l":"What is source?","p":["source is a bash command to read aliases, functions, and commands from the specified file. Typically, you'll supply bash with a configuration file such as .bashrc or .bash_profile, or an initialization file such as envsetup.sh. The difference is that while the configuration file lists configuration and user-defined aliases and functions, initialization files typically hold build commands such as breakfast, brunch, and lunch. Without those commands building would be significantly harder as you would have to memorize the long command to invoke a build manually!","But why do you need to run it after modifying a file? Well, bash cannot automatically detect changes in our files. To solve this, we either source it or log out and log back in, forcing bash to reload configuration files. Keep this in mind, because unlike configuration files, if you forget to source initialization files, build commands will not function!"]},{"i":"what-if-i-need-repo-globally","l":"What if I need repo globally?","p":["If you need the repo tool to be available anywhere, you will need to first download repo to your home directory, move it with sudo and give it executable permissions. The exact commands are as follows:","repo will now work anywhere, without any .bashrc modifications. However, these steps aren’t recommended as repo might become a security risk if a vulnerability is found.","Now we’re ready to download the source code."]},{"l":"Download","p":["Create a directory for the source:","Before we download, we need to tell repo and git who we are. Run the following commands, substituting your information:","Now, we’re ready to initialize. We need to tell repo which manifest to read:","-b is for the branch, and we’re on p9.0-x86, Android Pie. It’ll take a couple of seconds. You may need to type y for the color prompt.","Sync repo :","Problems syncing? :","-j is for threads. Typically, your CPU core count is your thread count, unless you’re using an older Intel CPU with hyperthreading. In that case, the thread count is double the count of your CPU cores. Newer CPUs have dropped hyperthreading unless you have the i9, so check how many threads you have. If you have four threads, you would run:","-c is for pulling in only the current branch, instead of the entire history. This is useful if you need the downloads fast and don’t want the entire history to be downloaded. This is used by default unless specified otherwise.","repo will start downloading all the code. That’s going to be slow, even on a fiber network. Expect downloads to take more than a couple hours.","To find out how many CPU threads you have, run nproc."]},{"l":"Easy build instructions","p":["This will build an x86 based .ISO for PCs.","Usage: $ bash build-x86.sh options buildVariants blissBranch extraOptions Options:","BuildVariants:","BlissBranch:","ExtraOptions:","To start, you must first use the -s (--sync) flag, then on following builds, it is not needed. Initial generation of the proprietary files from ChromeOS are also needed on the first build. We are able to use the -r (--proprietary) flag for that. This step needs to be on its own because the mounting process requires root permissions, so keep a look out for it asking for your root password.","First you must sync with the new manifest changes:","This will do initial patching. Some of the patches will show as already applied or conflict. This is normal behavior and will not effect the build process if you continue to the next step without addressing any of the conflicts.","The only times you should worry about the conflicts is when you are adding or changing patches in vendor/x86.","Next step is to download the proprietary files from ChromeOS:","After that, you can build your release file:"]},{"l":"Advanced build instructions","p":["Set up the build environment:","This is the initialization file we talked about earlier up top. This \"initializes\" the environment, and imports a bunch of useful build commands required to build your device. Again, you need to remember to source this file every time you log out and log back in, or launch a new bash/Terminal instance.","Define what device you’re going to build. For example, the Nexus 5X, has a codename of bullhead. You can check your specific device's codename on GitHub or on Google. Execute:","For 32 bit devices:","For 64 bit devices:","Let's break down the command. lunch initializes the proper environmental variables required for the build tools to build your specific device. Things like BLISS_DEVICE and other variables are set in this stage, and the changed variables will be shown as output. x86 or x86_64 is the specific device we are building. Finally, userdebug means that we will build a user-debuggable variant. This is usually what most ROMs use for publishing their builds. Manufacturers typically use user which disables most of the useful Android Logcats."]},{"i":"my-device-isnt-booting-and-userdebug-wont-print-any-adb-logcats-what-gives","l":"My device isn't booting, and userdebug won't print any adb logcats. What gives?","p":["There is a third build variant called eng, short for engineering builds. These builds will activate adb logcat during boot, and will show you exactly what is going wrong, where, and why. However, these builds are NOT recommended for normal usage as they are not securely hardened, have log spam that will slow down your device, and other unexpected problems like userspace utilities crashing during runtime. If you want to submit your device for mainline, do NOT submit an eng build!","If this is the first time you're running the build, you're going to want to run the proprietary build command first from the easy build instructions. Alternatively, you could also run those commands manually.","Then:","After that is complete, we can start the main building process. Run:","mka iso_img","And the build should start. The build process will take a long time. Prepare to wait a few hours, even on a decent machine."]},{"i":"why-mka-and-not-make","l":"Why mka and not make?","p":["make only runs with 1 thread. mka is properly aliased to use all of your threads by checking nproc.","If you want to customize your thread count (maybe you're building with a fan-screaming laptop in a quiet coffee shop), use make -j#, replacing the hash with the number of threads (example of make -j4)."]},{"l":"After building","p":["There are two outcomes to a build - either it fails and you get a red error message from make, or it succeeds and you see the Bliss logo in ASCII. If you encounter the former, you need to go back and fix whatever it's complaining about. Typically, 90% of the time the problem will be in your device tree. For the other 10%, submit a bug report to the ROM developers. Be sure to include the full log of your build to help diagnose the problem, and your device tree.","If you face the latter, congratulations! You've successfully built Bliss ROM for your device. Grab the artifacts for your device:","In here, you’ll find an .iso that goes along the lines of Bliss-v11.9--OFFICIAL-20190801-1619_x86_64_k-k4.9.153_m-18.3.5-pie-x86-llvm80_f-dev-kernel.org.iso."]},{"l":"Changing the target kernel branch","p":["Sometimes, you might be working on a device that requires a different kernel branch. In order to switch kernels effectively on Bliss OS, they need to be compiled with the OS at build time."]},{"l":"Switching the kernel branch","p":["Start off by entering the kernel folder","Then pull all the available kernel branched from your target repo. In this case, we are using the default BR-x86 repo","Then after that is finished, we need to checkout our target branch, and in this example we are choosing our k4.19.50-ax86-ga branch, which has added commits from the GalliumOS project for Chromebooks","Next step is to clean out any configs or generated files from the previously checked out kernel. To do this, run these commands","Once that is done, we can cd back to our main project folder","And run our build command again to generate the .iso with the target kernel we selected"]},{"l":"Using the patch system for testing","p":["We use a patching method we adapted for Bliss from Intel's Project Celadon & phh-treble. This patching system allows us to bring in a good number of commits to add to the OS, and test how they apply or if there are any conflicts.","Our intention was to make a system that can add all the needed x86/x86_64 commits to Bliss ROM, as well as other ROMs too.","The majority of this system is found in vendor/x86/utils.","From here, you simply generate the .patch files from your additions, and add them to the mix. In the following example, we are going to generate patches from packages/apps/Settings and add them to the proper folder for live testing.","From your Project folder:","And generate your .patch files. For this example, we've added four commits on top of what was there after sync","Then copy those files to the proper folder in vendor/x86. In this case, you will find it here:","After that is complete, you can make clean and run the patch system from your main project folder.","This should start patching all the source files. Once that is complete, you can rebuild."]},{"l":"Troubleshooting","p":["If your build failed, there are a couple things you can try.","Try a fresh repo sync to make your repository up to date. Sometimes, the Internet connection between you and GitHub can be flaky. In rare cases a commit merge might be ongoing, and you might've grabbed an incomplete merge. Mostly, this should fix the issue 70% of the time.","Make sure your dependencies are installed correctly. Error messages help out a lot here! Often it will say shared/linked library not found or something along those lines.","Make sure you sourced build/envsetup.sh. This is especially common and worth suspecting if none of the build commands like breakfast and lunch work. If you have repo sync ed do this again.","Make sure you’re at the root of the build tree. Again, to quickly jump there, use croot.","Make sure your computer itself isn’t faulty. HDDs usually die first, followed by RAM. SSDs rarely die but failure is not unheard of. In extremely rare cases, your CPU may have a defect. If you're unsure, run a stress test using a program like Prime95.","If something goes wrong and you've tried everything above, first use Google to look up your error! Most of the errors you encounter is due to misconfiguration and wrong commands entered. More often than not, Google will have the answer you are looking for. If you're still stuck and nothing fixes the problem, then ask us via our Telegram Build Support chat."]},{"l":"Conclusion","p":["Building a ROM is very hard and tedious and the results are very rewarding! If you managed to follow along, congratulations!","After you finish building, you can try out the Git Started guide. Make changes, commit, and send them off to our GitHub for Bliss OS repos & our Gerrit for review on Bliss ROM repos! Or better yet, download experimental commits not ready for the mainline repositories and review them! Again, ROM building is a fun project you can work with. I hope this guide was a lot of fun to run through!"]}],[{"i":"build-bliss-os-14x","l":"Build Bliss OS 14.x"},{"l":"Starting Off","p":["We also offer Android-Generic Project 2.0 as an easy to learn method of building Android 11 for PC's. Checkout the project README.md for more info.","Download the BlissRoms source code, based on AOSP, phhusson& BlissRoms","Please read the AOSP building instructions before proceeding."]},{"l":"What you need to build BlissOS","p":["Installing Java 8"]},{"l":"Grabbing Dependencies","p":["If you plan on building the kernel with the NO_KERNEL_CROSS_COMPILE flag, you will need to also have gcc-10+ installed:"]},{"l":"Initializing Repository","p":["Repo initialization :","sync repo :"]},{"l":"Options"},{"l":"Building"},{"l":"Extras","p":["For many cases, we do offer a number of \"extras\" that can be compiled into the builds :"]}],[{"l":"Development FAQ","p":["Much of what we are doing with Android source is lacking proper documentation as to what it does, and how. This document will try to answer a few of those questions.","What is bootable/newinstaller repo ? What is the purpose of it ? what does it contain ?","Bootable/newinstaller was initally created to handle the ramdisk.img, initrd.img and install.img creation, as well as packaging the final .iso/.img/,rpm file. This means it contains a set of scripts for the initrd image, a set of scripts for ths te installer image, and scripts to setup the filesystem and root environment.","How grub is handled in BlissOS ? How does it show first when normal AndroidOS boots straight to bootanimation ?","This is done by using the typical Linux method for booting with initrd.img, kernel, and system.img/ramdisk.img, where a grub menuentry is created that references the location of each img, and loads itlike normal linux would. The initrd.img and kernel load first, then after zygote loads, the init.sh file takes over and set's up the remaining hardware dynamically, and then initiallizes the graphics composer.","How does it recognize PC Bios on reboot ? as normally there is Bootloader in Android devices!","See above answers","What are the different Partitions that BlissOS Requires for running? This is in terms of Developer point of view nd not user! Does it have same partition table as that of any Android mobile ?","See above answers, with the addition of the install process creating a data.img or data folder on the install partiton, and that is detected by the initrd startup scripts and set as Internal Storage.","What type of kernels BlissOS supports or in general an Android-x86 support ? r there any specific one's ?","Linux/Google Android 11/12 LTS kernels, with about 20-30 patches added on top to support our filesystem and modularize all the drivers or options."]}],[{"l":"Maintaining Proper Authorship","p":["One of the most important things you need to keep in mind while working on open-source projects is maintaining correct authorship. In this article, we'll show you why maintaining proper authorship is important, give you a couple examples on correct and incorrect commits, and show you the overall procedure of correctly pulling in commits from others."]},{"i":"what-is-kanging","l":"What is \"kanging\"?","p":["[https://www.urbandictionary.com/define.php?term=kanged Kanging] is a term used in the Android development community for the action of passing off someone else's code as one's own, intentionally or unintentionally."]},{"i":"why-is-kanging-bad","l":"Why is kanging bad?","p":["Kanging is bad because the developers who worked hard on the commits do not get the recognition they deserve. Over time, this may cause the developer to quit releasing public source code or even retire from the Android development community. This has definitely happened before!"]},{"i":"kanging-examples-what-you-should-avoid-doing","l":"Kanging examples (what you should avoid doing)","p":["'''Example 1:''' You're trying to cherry-pick some commits from a different repository, but keep running into git merge issues. Out of frustration, you copy the code from the commit, and then just commit it using git commit -a. Satisfied, you push it up to GitHub.","'''Example 2:''' You bring up a bunch of commits, and squash them before pushing to GitHub.","'''Example 3:''' You intentionally want to pass off another developer's work as your own. You cherry-pick the commit, and then amend the commit to rewrite the author information.","Let's go over why this is wrong. Example 1 is an example of an unintentional kang. You didn't want to resolve the git merge issues, so decided to just copy the code and commit it as your own. This is bad because the author information does not get transferred over with your copy, which you have to specify manually.","Example 2 is more of an accident. If you squash multiple commits, all authorship information for the range of commits is lost. In addition, it becomes a real headache for other developers if something in the range of your commits is wrong. Because you cannot individually revert commits in a squash, squashing is very much discouraged and should ONLY be used when you have a lot of commits that you committed yourself and are small in nature.","Example 3 is an example of an intentional kang. We won't explain why because it should be fairly obvious."]},{"l":"How to maintain proper authorship","p":["The process is fairly simple yet important to understand.","If you are cherry-picking commits, the authorship information is transferred automatically. Provided that you are running git cherry-pick, the entire commit information, down to when the commit was created, is picked into your repository. You don't have to do anything in this case.","If you are committing someone else's code yourself, then you must manually specify who the author is. There are a lot of reasons why you would do this, from merge issues to incompatible code with the existing codebase. To manually specify an author, follow the [[#Manually specifying an author | Manually specifying an author section below]].","Finally, do NOT squash a range of commits that are not your own. This completely wipes authorship information from the range of commits and causes a massive headache for other developers."]},{"l":"Manually specifying an author","p":["You need to first determine the original author's name and email address.","GitHub no longer shows the author information when you mouse over the profile picture, which is quite unfortunate. However, there is an easy workaround.","Go to the commit that you want to pick. [https://github.com/BlissRoms/Documentation-release/commit/5ae1c6c4441786cd3ad5bd1773c831ba13cd86bc We'll use my commit as an example.]","Add the word .patch, with the period, to the end of the URL and press Enter to navigate to the raw patch.","In the patch, find the section that contains the author. It should be at the top of the page.","Now, it's time to commit with the correct author information. Make the necessary changes, and then commit using this command:","Following the example, I would write:","Once done, push to GitHub or Gerrit."]}],[{"l":"Contributing Documentation","p":["We are wide open to users submitting their documentation updates to our docs.blissroms.com site. Our repos for the docs site are here:","Documentation:","Knowledgebase:","Support Site:","Feel free to submit a pull request of your work and we'd be happy to include it \uD83D\uDE0A"]}],[{"i":"what-are-linux-drivers","l":"What are Linux Drivers?","p":["For those looking to help gain a better understanding of how Linux drivers work, here is a YouTube video that helps to explain things a bit https://youtu.be/juGNPLdjLH4"]}],[{"l":"Porting Linux Drivers","p":["When it seems that there might be a missing driver or hardware support for your specific device, the best way to add support for that is o search online for a Linux kernel module for your target component.","Once you've tracked down or created Linux drivers for your device, you have to turn it into a Linux kernel module, and then add it to external/kernel-drivers for it to be included in the current kernel build. Examples of others we add are here https://github.com/BlissRoms-x86/external_kernel-drivers/tree/r11-r36","The examples only add one Android.mk file, and the one I use is generic for just about any kernel module that has a standard MAKEFILE, not a MAKEFILE.am file.","So you should really only need to add your kernel module folder to external/kernel-drivers/ and copy the Android.mk into it, then build source as normal. It'll get picked up as one of the last steps in building and packaging the kernel","Once you have it packaged up, it's best practice to compile the full source and test that it is functioning properly, and once confirmed, submit the change to https://github.com/BlissRoms-x86/external_kernel-drivers as a pull-request."]}]]